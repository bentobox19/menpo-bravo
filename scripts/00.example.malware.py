from stix2 import Bundle
from stix2 import Indicator, Malware, Relationship
from stix2.base import STIXJSONEncoder
from stix2.properties import StringProperty, TimestampProperty
from stix2.v21 import CustomObservable
import json
import os

@CustomObservable('x-defi-address', [
    ('name', StringProperty(required=True)),
    ('description', StringProperty(required=True)),
    ('created', TimestampProperty(required=True)),
    ('modified', TimestampProperty(required=True)),
    ('blockchain', StringProperty(required=True)),
    ('value', StringProperty(required=True)),
])
class XDefiAddress():
    pass

# We did this on christmas night -> whatever
created_date = "2022-12-25T03:30:24Z"
modified_date = "2022-12-25T03:30:24Z"

# Malware SDO spec https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#_Toc16070645
malware = Malware(
    created=created_date,
    modified=modified_date,
    name="malware_stealer.exe",
    description=(
        "Installs in computers, steals cryptocurrency keys, sends them to remote server"
    ),
    # See `malware-type-ov` at https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#_Toc16070808
    malware_types=["spyware", "trojan"],
    is_family=False,
    # I'd omit last seen, and hook with a sighting SRO instead
    #
    # https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#_Toc16070807
    capabilities=[
        "exfiltrates-data",
        "communicates-with-c2",
        "steals-authentication-credentials"
    ],
)

# Now we will tell that the candidate (which in this exercise,
# did the research) found the malware at the given time and computed the hash

# TODO: Identity of the researcher
# TODO; Sighting of the thing in question (the malware)


malware_hash_indicator = Indicator(
    created=created_date,
    modified=modified_date,
    valid_from=created_date,
    name="0xeff003d64046a6f521ba31f39405cb720e953958",
    description="Platypus Attacker",
    pattern_type="stix",
    pattern="[file:hashes.'SHA-256' = '872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4']",
)

malware_hash_relationship = Relationship(
    created=created_date,
    modified=modified_date,
    relationship_type="indicates",
    spec_version="2.1",
    source_ref=malware_hash_indicator.id,
    target_ref=malware.id
)

# Relationships of malware
    # communicates-with  # ipv4-addr, ipv6-addr, domain-name, url
    # uses # infrastructure

BundleofAllObjects = Bundle(
    malware,
    malware_hash_indicator,
    malware_hash_relationship,
    allow_custom=True
)

# File carpentry
script_name = os.path.basename(__file__)
json_file_name = os.path.splitext(script_name)[0] + ".json"

with open('../stix-db/' + json_file_name, 'w') as f:
    f.write(json.dumps(BundleofAllObjects, indent=4, cls=STIXJSONEncoder))

# Count STIX objects by type and print it
from collections import defaultdict
object_count = defaultdict(int)

for obj in BundleofAllObjects.objects:
    object_count[obj.type] += 1

sorted_object_count = {key: object_count[key] for key in sorted(object_count)}
print(sorted_object_count)

